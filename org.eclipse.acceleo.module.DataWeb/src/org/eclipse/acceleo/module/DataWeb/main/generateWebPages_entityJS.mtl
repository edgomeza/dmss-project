[comment encoding = UTF-8 /]
[module generateWebPages_entityJS('http://www.unex.es/dmss/dataweb')]

[template public generateEntityJS(app : Aplicacion, entidad : Entidad)]
[file ('web/assets/js/'+entidad.nombre.toLowerCase()+'.js', false, 'UTF-8')]
/**
 * Gestor específico para la entidad [entidad.nombre/]
 */

class [entidad.nombre/]Manager extends CRUDManager {
    constructor() {
        super('[entidad.nombre.toLowerCase()/]');
    }

    /**
     * Obtiene la configuración de campos de la entidad
     */
    getEntityFields() {
        return ['['/]
            [for (atrib : Atributo | entidad.atributos) separator(',')]
            {
                name: '[atrib.nombre/]',
                label: '[atrib.nombre.toUpperFirst()/]',
                type: '[if (atrib.tipo = TipoAtributo::INTEGER)]number[elseif (atrib.tipo = TipoAtributo::BOOLEAN)]boolean[elseif (atrib.tipo = TipoAtributo::DECIMAL)]decimal[elseif (atrib.nombre.toLowerCase().contains('email'))]email[elseif (atrib.nombre.toLowerCase().contains('url'))]url[elseif (atrib.nombre.toLowerCase().contains('fecha') or atrib.nombre.toLowerCase().contains('date'))]date[else]text[/if]',
                isPrimary: [atrib.isPrimaryKey/],
                required: [not atrib.isPrimaryKey/],
                sortable: true,
                showInTable: true
            }
            [/for]
            [if (not entidad.referencias->isEmpty())],
            [for (ref : Referencia | entidad.referencias) separator(',')]
            {
                name: '[ref.nombre/]_ID',
                label: '[ref.nombre.toUpperFirst()/]',
                type: 'reference',
                isPrimary: false,
                required: true,
                sortable: true,
                showInTable: true,
                referenceEntity: '[ref.target.nombre.toLowerCase()/]'
            }
            [/for]
            [/if]
        ];
    }

    /**
     * Formatea valores específicos para [entidad.nombre/]
     */
    formatFieldValue(value, field) {
        // Formateo específico para esta entidad
        [for (atrib : Atributo | entidad.atributos)]
        [if (atrib.nombre.toLowerCase().contains('precio') or atrib.nombre.toLowerCase().contains('costo'))]
        if (field.name === '[atrib.nombre/]' && value !== null && value !== undefined) {
            return `€${parseFloat(value).toFixed(2)}`;
        }
        [/if]
        [if (atrib.nombre.toLowerCase().contains('porcentaje'))]
        if (field.name === '[atrib.nombre/]' && value !== null && value !== undefined) {
            return `${value}%`;
        }
        [/if]
        [/for]
        
        // Si es una referencia, mostrar con badge
        if (field.type === 'reference' && value) {
            return `<span class="badge badge-info">${value}</span>`;
        }
        
        // Usar el formateo del padre por defecto
        return super.formatFieldValue(value, field);
    }

    /**
     * Validaciones específicas para [entidad.nombre/]
     */
    validateField(fieldName, value) {
        [for (atrib : Atributo | entidad.atributos)]
        [if (atrib.tipo = TipoAtributo::INTEGER)]
        if (fieldName === '[atrib.nombre/]') {
            const numValue = parseInt(value);
            if (isNaN(numValue) || numValue < 0) {
                return {
                    isValid: false,
                    message: 'Debe ser un número entero positivo'
                };
            }
        }
        [/if]
        [if (atrib.tipo = TipoAtributo::DECIMAL)]
        if (fieldName === '[atrib.nombre/]') {
            const numValue = parseFloat(value);
            if (isNaN(numValue) || numValue < 0) {
                return {
                    isValid: false,
                    message: 'Debe ser un número positivo'
                };
            }
        }
        [/if]
        [if (atrib.nombre.toLowerCase().contains('email'))]
        if (fieldName === '[atrib.nombre/]') {
            const emailRegex = /^['['/]^\s@]+@['['/]^\s@]+\.['['/]^\s@]+$/;
            if (value && !emailRegex.test(value)) {
                return {
                    isValid: false,
                    message: 'Debe ser un email válido'
                };
            }
        }
        [/if]
        [/for]
        
        return { isValid: true };
    }

    /**
     * Acciones adicionales después de cargar datos
     */
    onDataLoaded(entities) {
        // Acciones específicas para [entidad.nombre/] después de cargar datos
        console.log(`Cargados ${entities.length} registros de [entidad.nombre/]`);
    }

    /**
     * Preparar datos antes de enviar al servidor
     */
    prepareDataForSave(data) {
        // Transformaciones específicas para [entidad.nombre/] antes de guardar
        [for (atrib : Atributo | entidad.atributos)]
        [if (atrib.tipo = TipoAtributo::BOOLEAN)]
        if (data.hasOwnProperty('[atrib.nombre/]')) {
            data['['/]'[atrib.nombre/]'] = data['['/]'[atrib.nombre/]'] === 'true' || data['['/]'[atrib.nombre/]'] === true;
        }
        [/if]
        [if (atrib.tipo = TipoAtributo::INTEGER)]
        if (data.hasOwnProperty('[atrib.nombre/]')) {
            data['['/]'[atrib.nombre/]'] = parseInt(data['['/]'[atrib.nombre/]']) || 0;
        }
        [/if]
        [if (atrib.tipo = TipoAtributo::DECIMAL)]
        if (data.hasOwnProperty('[atrib.nombre/]')) {
            data['['/]'[atrib.nombre/]'] = parseFloat(data['['/]'[atrib.nombre/]']) || 0;
        }
        [/if]
        [/for]
        
        return data;
    }

    /**
     * Obtiene filtros personalizados específicos para [entidad.nombre/]
     */
    getCustomFilters() {
        return {
            // Filtros específicos para [entidad.nombre/]
            [for (atrib : Atributo | entidad.atributos)]
            [if (atrib.tipo = TipoAtributo::BOOLEAN)]
            '[atrib.nombre/]': {
                type: 'select',
                options: ['['/]
                    { value: '', label: 'Todos' },
                    { value: 'true', label: 'Sí' },
                    { value: 'false', label: 'No' }
                ]
            },
            [/if]
            [/for]
        };
    }

    /**
     * Configuración de exportación para [entidad.nombre/]
     */
    getExportConfig() {
        return {
            filename: '[entidad.nombre.toLowerCase()/]_export',
            columns: this.getEntityFields().filter(f => f.showInTable).map(f => ({
                key: f.name,
                header: f.label
            }))
        };
    }
}

// Configuración global para esta entidad
window.entityManager = null;

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    // Solo inicializar si estamos en una página de [entidad.nombre/]
    const entityElement = document.querySelector('['['/]data-entity="[entidad.nombre.toLowerCase()/]"]');
    if (entityElement) {
        window.entityManager = new [entidad.nombre/]Manager();
        window.crudManager = window.entityManager; // Alias para funciones globales
        window.entityManager.init();
    }
});

// Exportar la clase para uso en otros módulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = [entidad.nombre/]Manager;
}
[/file]
[/template]