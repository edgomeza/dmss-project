[comment encoding = UTF-8 /]
[module javascriptGeneration('http://www.unex.es/dmss/dataweb')]

[comment @main/]
[template public generateJavaScriptFiles(app : Aplicacion)]
[file ('js/main.js', false, 'UTF-8')]
document.addEventListener('DOMContentLoaded', () => {
    // Inicialización de componentes principales
    initNavigation();
    initCRUDForms();
    initSurveys();
    initQuestionnaires();
});

function initNavigation() {
    const roleMenus = document.querySelectorAll('.role-menu');
	
    roleMenus.forEach(menu => {
        menu.addEventListener('click', (e) => {
            const roleName = e.currentTarget.dataset.role;
            console.log(`Navegando como rol: ${roleName}`);
            // Lógica de control de acceso basado en roles
            updateUIForRole(roleName);
        });
    });
}

function updateUIForRole(roleName) {
    // Ocultar/mostrar elementos según el rol
    const allRoleSpecificElements = document.querySelectorAll('&#91;data-role-access&#93;');
    allRoleSpecificElements.forEach(el => {
        const allowedRoles = (el.dataset.roleAccess || '').split(',').map(r => r.trim());
        el.style.display = allowedRoles.includes(roleName) ? 'block' : 'none';
    });
}

function handleAjaxError(error) {
    console.error('Error en solicitud AJAX:', error);
    showNotification('Error al procesar la solicitud', 'error');
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.classList.add('notification', `notification-${type}`);
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
[/file]

[file ('js/crud.js', false, 'UTF-8')]
function initCRUDForms() {
    const crudForms = document.querySelectorAll('.crud-form');
    crudForms.forEach(form => {
        form.addEventListener('submit', handleCRUDSubmit);
    });
}

function handleCRUDSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const entityType = form.dataset.entityType;

    fetch(`/api/${entityType}`, {
        method: form.dataset.method || 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error en la solicitud CRUD');
        }
        return response.json();
    })
    .then(data => {
        showNotification(`${entityType} procesado correctamente`);
        updateEntityList(entityType);
    })
    .catch(handleAjaxError);
}

function updateEntityList(entityType) {
    // Actualizar lista de entidades después de operaciones CRUD
    fetch(`/api/${entityType}/list`)
    .then(response => response.json())
    .then(data => {
        const listContainer = document.querySelector(`#${entityType}-list`);
        listContainer.innerHTML = renderEntityList(data);
    })
    .catch(handleAjaxError);
}

function renderEntityList(entities) {
    return entities.map(entity => `
        <tr>
            <td>${entity.id}</td>
            <td>${entity.nombre}</td>
            <td>
                <button onclick="editEntity(${entity.id})">Editar</button>
                <button onclick="deleteEntity(${entity.id})">Eliminar</button>
            </td>
        </tr>
    `).join('');
}
[/file]

[file ('js/survey.js', false, 'UTF-8')]
function initSurveys() {
    const surveys = document.querySelectorAll('.survey-container');
    surveys.forEach(survey => {
        const surveyId = survey.dataset.surveyId;
        survey.addEventListener('submit', (e) => handleSurveySubmit(e, surveyId));
    });
}

function handleSurveySubmit(event, surveyId) {
    event.preventDefault();
    const formData = new FormData(event.target);
    
    fetch(`/api/surveys/${surveyId}/submit`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(results => {
        displaySurveyResults(results);
    })
    .catch(handleAjaxError);
}

function displaySurveyResults(results) {
    const resultsContainer = document.querySelector('.survey-results');
    resultsContainer.innerHTML = `
        <h3>Resultados de la Encuesta</h3>
        ${renderResultsChart(results)}
    `;
}

function renderResultsChart(results) {
    // Implementación básica de gráfico de resultados
    return `
        <div class="results-chart">
            ${results.map(result => `
                <div class="result-bar">
                    <span>${result.label}</span>
                    <div style="width: ${result.percentage}%"></div>
                </div>
            `).join('')}
        </div>
    `;
}
[/file]
[/template]