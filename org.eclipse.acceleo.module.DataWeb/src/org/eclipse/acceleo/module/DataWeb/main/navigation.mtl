[comment encoding = UTF-8 /]
[module navigation('http://www.unex.es/dmss/dataweb')]

[template public generateNavigation(app : Aplicacion)]
    [comment Generación del componente de navegación /]
    [generateMainNavigation(app)/]
    
    [comment Generación de páginas Index/Home para cada rol /]
    [generateRoleIndexPages(app)/]
    
    [comment Generación de JavaScript para manejar la navegación /]
    [generateNavigationJS(app)/]
[/template]

[template public generateMainNavigation(app : Aplicacion)]
[file (app.nombre.toLowerCase().replaceAll(' ', '_') + '/components/navigation.html', false, 'UTF-8')]
<nav class="main-navigation">
    <div class="navigation-header">
        <div class="logo">
            <a href="/index.html">[app.nombre/]</a>
        </div>
        
        <div class="role-selector">
            <label for="role-select">Seleccionar Rol:</label>
            <select id="role-select">
                [for (role : Rol | app.roles)]
                <option value="[role.nombre.toLowerCase().replaceAll(' ', '_')/]">[role.nombre/]</option>
                [/for]
            </select>
        </div>
    </div>
    
    <div class="navigation-menus">
        [for (role : Rol | app.roles)]
        <div class="role-menu" id="menu-[role.nombre.toLowerCase().replaceAll(' ', '_')/]">
            <h2>Menú de [role.nombre/]</h2>
            <ul class="nav-list">
                <li class="nav-item">
                    <a href="/[role.nombre.toLowerCase().replaceAll(' ', '_')/]/index_home.html">Inicio</a>
                </li>
                [for (page : Pagina | role.paginasAccesibles)]
                <li class="nav-item">
                    <a href="[generatePageLink(role, page)/]">[page.titulo/]</a>
                </li>
                [/for]
            </ul>
        </div>
        [/for]
    </div>
</nav>
[/file]
[/template]

[template public generateRoleIndexPages(app : Aplicacion)]
[comment Genera la página principal del sitio /]
[file (app.nombre.toLowerCase().replaceAll(' ', '_') + '/index.html', false, 'UTF-8')]
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[app.nombre/]</title>
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="css/responsive.css">
</head>
<body>
    <header class="site-header">
        <h1>[app.nombre/]</h1>
        <p>[app.descripcion/]</p>
    </header>
    
    <main class="role-selection">
        <h2>Selecciona un rol para continuar</h2>
        
        <div class="role-grid">
            [for (role : Rol | app.roles)]
            <a href="/[role.nombre.toLowerCase().replaceAll(' ', '_')/]/index_home.html" class="role-card">
                <h3>[role.nombre/]</h3>
                <p>[if (role.descripcion <> null)][role.descripcion/][else]Acceder como [role.nombre/][/if]</p>
            </a>
            [/for]
        </div>
    </main>
    
    <footer>
        <p>&copy; [app.nombre/] - Todos los derechos reservados</p>
    </footer>
    
    <script src="js/navigation.js"></script>
</body>
</html>
[/file]

[comment Genera las páginas index_home.html para cada rol /]
[for (role : Rol | app.roles)]
[file (app.nombre.toLowerCase().replaceAll(' ', '_') + '/' + role.nombre.toLowerCase().replaceAll(' ', '_') + '/index_home.html', false, 'UTF-8')]
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inicio - [role.nombre/] | [app.nombre/]</title>
    <link rel="stylesheet" href="../css/main.css">
    <link rel="stylesheet" href="../css/responsive.css">
</head>
<body data-current-role="[role.nombre.toLowerCase().replaceAll(' ', '_')/]">
    <header class="site-header">
        <h1>[app.nombre/] - Panel de [role.nombre/]</h1>
    </header>
    
    <div id="navigation-container">
        <!-- El componente de navegación se cargará aquí -->
    </div>
    
    <main class="role-dashboard">
        <h2>Bienvenido al panel de [role.nombre/]</h2>
        <p>Desde aquí puedes acceder a las siguientes funcionalidades:</p>
        
        <div class="dashboard-cards">
            [for (page : Pagina | role.paginasAccesibles)]
            <div class="dashboard-card">
                <h3>[page.titulo/]</h3>
                <p>[if (page.descripcion <> null)][page.descripcion/][else]Accede a [page.titulo/][/if]</p>
                <a href="[generatePageLink(role, page)/]" class="card-link">Acceder</a>
            </div>
            [/for]
        </div>
        
        [if (role.paginasAccesibles->exists(p | p.oclIsKindOf(PaginaIndice)))]
        <section class="quick-access">
            <h3>Acceso rápido a entidades</h3>
            <ul class="entity-list">
                [for (page : Pagina | role.paginasAccesibles)]
                [if (page.oclIsKindOf(PaginaIndice))]
                <li>
                    <a href="[generatePageLink(role, page)/]">
                        [page.titulo/]
                    </a>
                </li>
                [/if]
                [/for]
            </ul>
        </section>
        [/if]
        
        [if (role.paginasAccesibles->exists(p | p.oclIsKindOf(PaginaCRUD)))]
        <section class="entity-management">
            <h3>Gestión de entidades</h3>
            <div class="entity-operations">
                [for (entity : Entidad | getAccessibleEntities(role))]
                <div class="entity-group">
                    <h4>[entity.nombre/]</h4>
                    <div class="operation-buttons">
                        [if (entity.hasIndex or entity.hasCRUD)]
                        <a href="index_[entity.nombre.toLowerCase().replaceAll(' ', '_')/].html" class="operation-btn">Listar</a>
                        [/if]
                        [if (entity.hasCreate or entity.hasCRUD)]
                        <a href="create_[entity.nombre.toLowerCase().replaceAll(' ', '_')/].html" class="operation-btn">Crear</a>
                        [/if]
                        [if (entity.hasUpdate or entity.hasCRUD)]
                        <a href="update_[entity.nombre.toLowerCase().replaceAll(' ', '_')/].html" class="operation-btn">Editar</a>
                        [/if]
                        [if (entity.hasDelete or entity.hasCRUD)]
                        <a href="delete_[entity.nombre.toLowerCase().replaceAll(' ', '_')/].html" class="operation-btn">Eliminar</a>
                        [/if]
                    </div>
                </div>
                [/for]
            </div>
        </section>
        [/if]
    </main>
    
    <footer>
        <p>&copy; [app.nombre/] - Todos los derechos reservados</p>
    </footer>
    
    <script>
        // Cargar el componente de navegación
        fetch('../components/navigation.html')
            .then(response => response.text())
            .then(html => {
                document.getElementById('navigation-container').innerHTML = html;
                // Inicializar la navegación una vez cargada
                const script = document.createElement('script');
                script.src = '../js/navigation.js';
                script.onload = function() {
                    // Actualizar el selector de rol con el rol actual
                    const roleSelector = document.getElementById('role-select');
                    if (roleSelector) {
                        roleSelector.value = '[role.nombre.toLowerCase().replaceAll(' ', '_')/]';
                        // Activar el menú correspondiente
                        updateVisibleMenu('[role.nombre.toLowerCase().replaceAll(' ', '_')/]');
                    }
                };
                document.body.appendChild(script);
            });
    </script>
</body>
</html>
[/file]
[/for]
[/template]

[template public generateNavigationJS(app : Aplicacion)]
[file (app.nombre.toLowerCase().replaceAll(' ', '_') + '/js/navigation.js', false, 'UTF-8')]
document.addEventListener('DOMContentLoaded', () => {
    initNavigation();
});

function initNavigation() {
    // Selector de roles
    const roleSelect = document.getElementById('role-select');
    if (roleSelect) {
        // Establecer el rol inicial basado en la URL actual o usar el primer rol
        const currentPath = window.location.pathname;
        const roleFromPath = extractRoleFromPath(currentPath);
        
        if (roleFromPath) {
            roleSelect.value = roleFromPath;
            updateVisibleMenu(roleFromPath);
        } else {
            // Si no se puede extraer un rol, usar el primero de la lista
            const firstRole = roleSelect.options['['/]0].value;
            roleSelect.value = firstRole;
            updateVisibleMenu(firstRole);
        }
        
        // Manejar el cambio de rol
        roleSelect.addEventListener('change', (e) => {
            const selectedRole = e.target.value;
            navigateToRoleHome(selectedRole);
        });
    }
    
    // Enlaces de navegación
    setupNavigationLinks();
}

function extractRoleFromPath(path) {
    // Extraer el rol de la ruta (formato: /rol/pagina.html)
    const matches = path.match(/\/(['^'/]+)\//);
    if (matches && matches.length > 1) {
        return matches['['/]1];
    }
    return null;
}

function navigateToRoleHome(role) {
    window.location.href = `/${role}/index_home.html`;
}

function updateVisibleMenu(selectedRole) {
    // Ocultar todos los menús de rol
    const allRoleMenus = document.querySelectorAll('.role-menu');
    allRoleMenus.forEach(menu => {
        menu.style.display = 'none';
    });
    
    // Mostrar solo el menú del rol seleccionado
    const activeMenu = document.getElementById(`menu-${selectedRole}`);
    if (activeMenu) {
        activeMenu.style.display = 'block';
    }
}

function setupNavigationLinks() {
    const navLinks = document.querySelectorAll('.nav-item a');
    
    navLinks.forEach(link => {
        // Marcar enlaces activos
        if (link.href === window.location.href) {
            link.classList.add('active');
        }
        
        // Configurar eventos de clic
        link.addEventListener('click', (e) => {
            console.log(`Navegando a: ${link.href}`);
        });
    });
    
    // Manejar botones de operaciones
    const operationButtons = document.querySelectorAll('.operation-btn');
    operationButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            console.log(`Ejecutando operación: ${button.textContent} en ${button.href}`);
        });
    });
}
[/file]
[/template]

[comment =============== FUNCIONES AUXILIARES =============== /]

[template public generatePageLink(role : Rol, page : Pagina)]
[let rolePath : String = role.nombre.toLowerCase().replaceAll(' ', '_')]
[if (page.oclIsTypeOf(PaginaHome))]
/[rolePath/]/index_home.html
[elseif (page.oclIsTypeOf(PaginaContenido))]
/[rolePath/]/content_[page.nombre.toLowerCase().replaceAll(' ', '_')/].html
[elseif (page.oclIsKindOf(PaginaCRUD))]
[let entityName : String = page.oclAsType(PaginaCRUD).entidad.nombre.toLowerCase().replaceAll(' ', '_')]
[if (page.oclIsTypeOf(PaginaIndice))]
/[rolePath/]/index_[entityName/].html
[elseif (page.oclIsTypeOf(PaginaIndiceDetalle))]
/[rolePath/]/index_detail_[entityName/].html
[elseif (page.oclIsTypeOf(PaginaDetalle))]
/[rolePath/]/detail_[entityName/].html
[elseif (page.oclIsTypeOf(PaginaCreacion))]
/[rolePath/]/create_[entityName/].html
[elseif (page.oclIsTypeOf(PaginaActualizacion))]
/[rolePath/]/update_[entityName/].html
[elseif (page.oclIsTypeOf(PaginaBorrado))]
/[rolePath/]/delete_[entityName/].html
[else]
/[rolePath/]/crud_[entityName/].html
[/if]
[/let]
[else]
/[rolePath/]/[page.nombre.toLowerCase().replaceAll(' ', '_')/].html
[/if]
[/let]
[/template]

[query public getAccessibleEntities(role : Rol) : Sequence(Entidad) = 
    role.paginasAccesibles->select(p | p.oclIsKindOf(PaginaCRUD))
    ->collect(p | p.oclAsType(PaginaCRUD).entidad)
    ->asSequence()->asSet()->asSequence()
/]