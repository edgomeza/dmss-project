[comment encoding = UTF-8 /]
[module generateWebPages_crudCreate('http://www.unex.es/dmss/dataweb')]

[template public generateCRUDCreate(app : Aplicacion, entidad : Entidad, rol : Rol)]
[file ('web/'+rol.nombre.toLowerCase()+'/pages/'+entidad.nombre.toLowerCase()+'/create.html', false, 'UTF-8')]
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[app.nombre/] - Crear [entidad.nombre/]</title>
    <meta name="description" content="Crear nuevo registro de [entidad.nombre/]">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../../../assets/css/style.css">
    <link rel="icon" type="image/x-icon" href="../../../assets/icons/favicon.ico">
</head>
<body>
    <header class="app-header">
        <div class="container">
            <h1>Crear [entidad.nombre/]</h1>
            <p>Añadir un nuevo registro de [entidad.nombre/] al sistema</p>
        </div>
    </header>
    
    <nav class="main-nav">
        <div class="container nav-container">
            <div class="nav-brand">
                <a href="../../../index.html" class="nav-logo">[app.nombre/]</a>
            </div>
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="../../dashboard.html" class="nav-link">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a href="index.html" class="nav-link">Gestión [entidad.nombre/]</a>
                </li>
                <li class="nav-item">
                    <a href="list.html" class="nav-link">Listar</a>
                </li>
                <li class="nav-item">
                    <a href="create.html" class="nav-link active">Crear</a>
                </li>
            </ul>
            <button class="nav-toggle" aria-label="Abrir menú">
                <span></span>
                <span></span>
                <span></span>
            </button>
        </div>
    </nav>
    
    <nav class="breadcrumb">
        <div class="container">
            <ul class="breadcrumb-list">
                <li class="breadcrumb-item">
                    <a href="../../../index.html" class="breadcrumb-link">Inicio</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="../../dashboard.html" class="breadcrumb-link">[rol.nombre/]</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="index.html" class="breadcrumb-link">[entidad.nombre/]</a>
                </li>
                <li class="breadcrumb-item">
                    <span>Crear</span>
                </li>
            </ul>
        </div>
    </nav>
    
    <main class="main-content">
        <div class="container">
            <div class="form-container">
                <div class="card">
                    <div class="card-header">
                        <h2>Nuevo [entidad.nombre/]</h2>
                        <p>Complete el formulario para crear un nuevo registro</p>
                    </div>
                    <div class="card-body">
                        <form id="createForm" class="create-form" data-validate>
                            [for (atrib : Atributo | entidad.atributos)]
                            [if (not atrib.isPrimaryKey)]
                            <div class="form-group">
                                <label for="[atrib.nombre/]" class="form-label">
                                    [atrib.nombre/] [if (not atrib.isPrimaryKey)]<span class="required">*</span>[/if]
                                </label>
                                [if (atrib.tipo = TipoAtributo::BOOLEAN)]
                                <select id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" required>
                                    <option value="">Seleccionar...</option>
                                    <option value="true">Sí</option>
                                    <option value="false">No</option>
                                </select>
                                [elseif (atrib.tipo = TipoAtributo::INTEGER)]
                                <input type="number" id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" required>
                                [elseif (atrib.tipo = TipoAtributo::DECIMAL)]
                                <input type="number" id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" step="0.01" required>
                                [elseif (atrib.nombre.toLowerCase().contains('email'))]
                                <input type="email" id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" required>
                                [elseif (atrib.nombre.toLowerCase().contains('fecha') or atrib.nombre.toLowerCase().contains('date'))]
                                <input type="date" id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" required>
                                [elseif (atrib.nombre.toLowerCase().contains('descripcion') or atrib.nombre.toLowerCase().contains('comentario'))]
                                <textarea id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" rows="4" required></textarea>
                                [else]
                                <input type="text" id="[atrib.nombre/]" name="[atrib.nombre/]" class="form-control" required>
                                [/if]
                                <div class="field-help">
                                    [if (atrib.tipo = TipoAtributo::INTEGER)]
                                    Ingrese un número entero
                                    [elseif (atrib.tipo = TipoAtributo::DECIMAL)]
                                    Ingrese un número decimal
                                    [elseif (atrib.tipo = TipoAtributo::BOOLEAN)]
                                    Seleccione Sí o No
                                    [else]
                                    Ingrese el [atrib.nombre.toLowerCase()/]
                                    [/if]
                                </div>
                            </div>
                            [/if]
                            [/for]
                            
                            [comment Referencias a otras entidades /]
                            [for (ref : Referencia | entidad.referencias)]
                            <div class="form-group">
                                <label for="[ref.nombre/]_ID" class="form-label">
                                    [ref.nombre/] <span class="required">*</span>
                                </label>
                                <select id="[ref.nombre/]_ID" name="[ref.nombre/]_ID" class="form-control" required>
                                    <option value="">Seleccionar [ref.nombre/]...</option>
                                    <!-- Las opciones se cargarán dinámicamente -->
                                </select>
                                <div class="field-help">
                                    Seleccione un [ref.nombre/] existente
                                </div>
                            </div>
                            [/for]
                            
                            <div class="form-actions">
                                <button type="submit" class="btn btn-success" id="submitBtn">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="9,11 12,14 22,4"></polyline>
                                        <path d="m21 12 v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                                    </svg>
                                    Crear [entidad.nombre/]
                                </button>
                                <a href="list.html" class="btn btn-secondary">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="15,18 9,12 15,6"></polyline>
                                    </svg>
                                    Cancelar
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <footer class="app-footer">
        <div class="container">
            <div class="footer-bottom">
                <p>&copy; 2025 [app.nombre/] - Crear [entidad.nombre/]</p>
            </div>
        </div>
    </footer>
    
    <script src="../../../assets/js/app.js"></script>
    <script src="../../../assets/js/data-manager.js"></script>
    <script src="../../../assets/js/form-utilities.js"></script>
    <script src="../../../assets/js/crud-manager.js"></script>
    <script src="../../../assets/js/[entidad.nombre.toLowerCase()/].js"></script>
    
    <script>
        // Configuración específica para esta página
        window.entityConfig = {
            name: '[entidad.nombre.toLowerCase()/]',
            form: 'create',
            fields: ['['/]
                [for (atrib : Atributo | entidad.atributos->select(a | not a.isPrimaryKey)) separator(',')]
                {
                    name: '[atrib.nombre/]',
                    type: '[if (atrib.tipo = TipoAtributo::INTEGER)]number[elseif (atrib.tipo = TipoAtributo::BOOLEAN)]boolean[elseif (atrib.tipo = TipoAtributo::DECIMAL)]decimal[else]text[/if]',
                    required: true
                }
                [/for]
                [if (not entidad.referencias->isEmpty())],
                [for (ref : Referencia | entidad.referencias) separator(',')]
                {
                    name: '[ref.nombre/]_ID',
                    type: 'select',
                    required: true,
                    reference: '[ref.target.nombre.toLowerCase()/]'
                }
                [/for]
                [/if]
            ],
            validationRules: {
                [for (atrib : Atributo | entidad.atributos->select(a | not a.isPrimaryKey)) separator(',')]
                '[atrib.nombre/]': {
                    required: true
                    [if (atrib.tipo = TipoAtributo::INTEGER)]
                    ,isInteger: true
                    [elseif (atrib.tipo = TipoAtributo::DECIMAL)]
                    ,isDecimal: true
                    [elseif (atrib.nombre.toLowerCase().contains('email'))]
                    ,isEmail: true
                    [/if]
                }
                [/for]
                [if (not entidad.referencias->isEmpty())],
                [for (ref : Referencia | entidad.referencias) separator(',')]
                '[ref.nombre/]_ID': {
                    required: true
                }
                [/for]
                [/if]
            }
        };
        
        // Inicializar la página
        document.addEventListener('DOMContentLoaded', async function() {
            // Cargar opciones para selects de referencias
            [for (ref : Referencia | entidad.referencias)]
            await loadReferenceOptions('[ref.nombre/]_ID', '[ref.target.nombre.toLowerCase()/]');
            [/for]
            
            // Manejar envío del formulario
            document.getElementById('createForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (validateForm('createForm', window.entityConfig.validationRules)) {
                    createEntity();
                }
            });
        });
        
        // Función para cargar opciones de referencia
        async function loadReferenceOptions(selectId, entityName) {
            try {
                const dataManager = new DataManager(entityName);
                const response = await dataManager.getAll();
                
                if (response && response.entities) {
                    const select = document.getElementById(selectId);
                    response.entities.forEach(function(entity) {
                        const option = document.createElement('option');
                        const keys = Object.keys(entity);
                        option.value = entity['['/]keys['['/]0]];
                        option.textContent = `${entity['['/]keys['['/]0]]} - ${entity['['/]keys['['/]1]] || 'Item'}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading reference options:', error);
            }
        }
        
        // Función para crear la entidad
        async function createEntity() {
            const form = document.getElementById('createForm');
            const formData = new FormData(form);
            const data = {};
            
            for (let ['['/]key, value] of formData.entries()) {
                data['['/]key] = value;
            }
            
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.innerHTML;
            
            // Mostrar loading
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner"></span> Creando...';
            
            try {
                const dataManager = new DataManager('[entidad.nombre.toLowerCase()/]');
                const response = await dataManager.create(data);
                
                if (response && response.success) {
                    window.app.showAlert('¡[entidad.nombre/] creado correctamente!', 'success');
                    setTimeout(() => {
                        window.location.href = 'list.html';
                    }, 1500);
                } else {
                    window.app.showAlert('Error al crear [entidad.nombre/]: ' + (response?.error || 'Error desconocido'), 'danger');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            } catch (error) {
                window.app.showAlert('Error al crear [entidad.nombre/]: ' + error.message, 'danger');
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }
    </script>
    
    <style>
        .form-container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .create-form {
            display: grid;
            gap: 1.5rem;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--gray-700);
        }
        
        .required {
            color: var(--danger-600);
            font-weight: 600;
        }
        
        .form-control {
            padding: 0.75rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            transition: var(--transition);
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary-500);
            box-shadow: 0 0 0 3px var(--primary-100);
        }
        
        .field-help {
            font-size: 0.75rem;
            color: var(--gray-500);
            margin-top: 0.25rem;
        }
        
        .form-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-200);
        }
        
        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid currentColor;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
            margin-right: 0.5rem;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .form-actions {
                flex-direction: column;
            }
            
            .form-actions .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</body>
</html>
[/file]
[/template]